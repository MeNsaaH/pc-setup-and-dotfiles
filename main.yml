---
- hosts: all

  vars_files:
    - vars/{{ ansible_distribution }}.yml
    - default-config.yml

  roles:
    - role: elliotweiser.osx-command-line-tools
      when:
        - ansible_distribution == "MacOSX"
    - role: geerlingguy.mac.homebrew
      when:
        - ansible_distribution == "MacOSX"
      tags: ["homebrew"]
    - role: geerlingguy.mac.mas
      when:
        - mas_installed_apps or mas_installed_app_ids
        - ansible_distribution == "MacOSX"
      tags: ["mas"]
    - role: geerlingguy.mac.dock
      tags: ["dock"]
      when:
        - configure_dock
        - ansible_distribution == "MacOSX"

  tasks:
    - name: "Ensure required directories ({{ item }}) exists"
      file:
        state: directory
        path: "{{ item }}"
      loop: "{{ required_directories }}"

    - name: "Install required {{ ansible_distribution }} Packages"
      import_tasks: "tasks/system_packages.yml"
      when:
        - ansible_distribution == "Ubuntu"
      become: true
      tags: ["system-packages"]

    - name: Git Config
      community.general.git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop: "{{ git_configs }}"
      tags: ["git"]

    - name: Fonts installation
      include_tasks: "tasks/fonts.yml"
      vars:
        font: "{{ item }}"
      loop: "{{ fonts }}"
      tags: ["fonts"]
      args:
        apply:
          tags:
            - fonts

    - include_tasks: tasks/dotfiles.yml
      tags: ["dotfiles", "zsh", "vim"]
      loop:
        - "generic"
        - "{{ ansible_distribution }}"
      args:
        apply:
          tags: ["dotfiles", "zsh", "vim"]

    - name: Setup ZSH and ohmyzsh
      import_tasks: tasks/zsh.yml
      tags: ["zsh"]

    - name: Setup vim plugins
      block:
        - name: Ensure vundle repository is cloned locally and installed.
          git:
            repo: "https://github.com/VundleVim/Vundle.vim.git"
            dest: "{{ ansible_env.HOME }}/.vim/bundle/Vundle.vim"
            accept_hostkey: "true"

        - name: Install vim plugins
          shell: "vim +PluginInstall +qall"
          args:
            executable: /bin/bash
      tags: ["vim"]

    - name: Setup iterm2
      import_tasks: tasks/terminal.yml
      when:
        - ansible_distribution == "MacOSX"
      tags: ["iterm"]

    - name: Setup kubectl and kubernetes components
      tags: ["kubectl", "krew"]
      include_tasks: "tasks/krew.yml"
      args:
        apply:
          tags: ["kubectl", "krew"]

    - name: ensure fzf completions are installed.
      shell: $(brew --prefix)/opt/fzf/install
      args:
        creates: "{{ ansible_env.HOME }}/.fzf.zsh"
      when:
        - ansible_distribution == "MacOSX"

    - name: Terraform setup
      block:
        - name: Check if Terraform is installed.
          shell: terraform --version
          register: which_terraform
          failed_when: no
          changed_when: no
        - name: Install terraform versions using tfenv
          shell:
            executable: /bin/bash
            cmd: |
              tfenv install latest
              tfenv use latest
          when: which_terraform.rc != 0
      tags: ["terraform"]

    - name: Node/NVM setup
      block:
        - name: Check if Node is installed.
          shell: node --version
          register: which_node
          failed_when: no
          changed_when: no
        - name: Install node versions using nvm
          environment:
            NVM_DIR: "{{ ansible_env.HOME }}/.nvm"
          shell:
            executable: /bin/zsh
            cmd: |
              source {{ ansible_env.HOME }}/.zshrc || true
              nvm install node
              nvm use node
          when: which_node.rc != 0
      tags: ["node"]

    - import_tasks: tasks/extra-packages.yml
      tags: ["extra-packages"]

    - name: Rust setup
      block:
        - name: Check if rust is installed.
          shell: rustc --version
          register: which_rust
          failed_when: no
          changed_when: no
        - name: Check if rustup is installed.
          shell: rustup --version
          register: which_rustup
          failed_when: no
          changed_when: no
        - name: Downlaod rustup installation script
          get_url:
            url: https://sh.rustup.rs
            dest: /tmp/rustup-install.sh
            mode: 0755
          when: which_rustup.rc != 0
        - name: Install rust versions using rustup
          shell:
            executable: /bin/zsh
            cmd: |
              /tmp/rustup-install.sh -y
          when: which_rustup.rc != 0
        - name: Install rust versions using rustup
          shell:
            executable: /bin/zsh
            cmd: |
              rustup install stable
              rustup default stable
          when: which_rust.rc != 0
      tags: ["rust"]
    - name: Install ASDF and plugins
      block:
        - name: Check if asdf is installed.
          shell: asdf --version
          register: which_asdf
          failed_when: no
          changed_when: no
        - name: get list of installed plugins
          shell: asdf plugin list
          register: asdf_installed_plugins
          failed_when: no
          changed_when: no
          args:
            executable: /bin/zsh
          when: which_asdf.rc == 0
        - name: Install {{ item.name }} asdf plugin
          shell: |
            source {{ ansible_env.HOME }}/.zshrc || true
            asdf plugin add {{ item.name }} {{ item.repo | default('') }}
            asdf install {{ item.name }} latest
            asdf set -u {{ item.name }} latest
          args:
            executable: /bin/zsh
          loop: "{{ asdf_plugins }}"
          when:
          - which_asdf.rc == 0
          - item.name not in asdf_installed_plugins.stdout_lines
      tags: ["asdf"]